/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freee

import (
	"encoding/json"
)

// CompanyParamsFiscalYears struct for CompanyParamsFiscalYears
type CompanyParamsFiscalYears struct {
	// 製造業向け機能（true: 使用する、false: 使用しない）
	UseIndustryTemplate *bool `json:"use_industry_template,omitempty"`
	// 固定資産の控除法（true\\: 間接控除法、false\\: 直接控除法）<br> 間接控除法は法人のみ対応しています。 
	IndirectWriteOffMethod *bool `json:"indirect_write_off_method,omitempty"`
	// 間接控除時の累計額(法人のみ)（true: 資産分類別、false: 共通）' 
	IndirectWriteOffMethodType *bool `json:"indirect_write_off_method_type,omitempty"`
	// 期首日
	StartDate *string `json:"start_date,omitempty"`
	// 期末日（決算日）
	EndDate *string `json:"end_date,omitempty"`
	// 期
	AccountingPeriod *int32 `json:"accounting_period,omitempty"`
	// 減価償却端数処理法(法人のみ)(0: 切り捨て、1: 切り上げ)
	DepreciationFraction *int32 `json:"depreciation_fraction,omitempty"`
	// 消費税端数処理方法（0: 切り上げ、1: 切り捨て, 2: 四捨五入）
	TaxFraction *int32 `json:"tax_fraction,omitempty"`
	// 不動産所得使用区分（0: 一般、3: 一般/不動産） ※個人事業主のみ設定可能
	ReturnCode *int32 `json:"return_code,omitempty"`
}

// NewCompanyParamsFiscalYears instantiates a new CompanyParamsFiscalYears object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyParamsFiscalYears() *CompanyParamsFiscalYears {
	this := CompanyParamsFiscalYears{}
	return &this
}

// NewCompanyParamsFiscalYearsWithDefaults instantiates a new CompanyParamsFiscalYears object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyParamsFiscalYearsWithDefaults() *CompanyParamsFiscalYears {
	this := CompanyParamsFiscalYears{}
	return &this
}

// GetUseIndustryTemplate returns the UseIndustryTemplate field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetUseIndustryTemplate() bool {
	if o == nil || o.UseIndustryTemplate == nil {
		var ret bool
		return ret
	}
	return *o.UseIndustryTemplate
}

// GetUseIndustryTemplateOk returns a tuple with the UseIndustryTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetUseIndustryTemplateOk() (*bool, bool) {
	if o == nil || o.UseIndustryTemplate == nil {
		return nil, false
	}
	return o.UseIndustryTemplate, true
}

// HasUseIndustryTemplate returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasUseIndustryTemplate() bool {
	if o != nil && o.UseIndustryTemplate != nil {
		return true
	}

	return false
}

// SetUseIndustryTemplate gets a reference to the given bool and assigns it to the UseIndustryTemplate field.
func (o *CompanyParamsFiscalYears) SetUseIndustryTemplate(v bool) {
	o.UseIndustryTemplate = &v
}

// GetIndirectWriteOffMethod returns the IndirectWriteOffMethod field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetIndirectWriteOffMethod() bool {
	if o == nil || o.IndirectWriteOffMethod == nil {
		var ret bool
		return ret
	}
	return *o.IndirectWriteOffMethod
}

// GetIndirectWriteOffMethodOk returns a tuple with the IndirectWriteOffMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetIndirectWriteOffMethodOk() (*bool, bool) {
	if o == nil || o.IndirectWriteOffMethod == nil {
		return nil, false
	}
	return o.IndirectWriteOffMethod, true
}

// HasIndirectWriteOffMethod returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasIndirectWriteOffMethod() bool {
	if o != nil && o.IndirectWriteOffMethod != nil {
		return true
	}

	return false
}

// SetIndirectWriteOffMethod gets a reference to the given bool and assigns it to the IndirectWriteOffMethod field.
func (o *CompanyParamsFiscalYears) SetIndirectWriteOffMethod(v bool) {
	o.IndirectWriteOffMethod = &v
}

// GetIndirectWriteOffMethodType returns the IndirectWriteOffMethodType field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetIndirectWriteOffMethodType() bool {
	if o == nil || o.IndirectWriteOffMethodType == nil {
		var ret bool
		return ret
	}
	return *o.IndirectWriteOffMethodType
}

// GetIndirectWriteOffMethodTypeOk returns a tuple with the IndirectWriteOffMethodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetIndirectWriteOffMethodTypeOk() (*bool, bool) {
	if o == nil || o.IndirectWriteOffMethodType == nil {
		return nil, false
	}
	return o.IndirectWriteOffMethodType, true
}

// HasIndirectWriteOffMethodType returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasIndirectWriteOffMethodType() bool {
	if o != nil && o.IndirectWriteOffMethodType != nil {
		return true
	}

	return false
}

// SetIndirectWriteOffMethodType gets a reference to the given bool and assigns it to the IndirectWriteOffMethodType field.
func (o *CompanyParamsFiscalYears) SetIndirectWriteOffMethodType(v bool) {
	o.IndirectWriteOffMethodType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CompanyParamsFiscalYears) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CompanyParamsFiscalYears) SetEndDate(v string) {
	o.EndDate = &v
}

// GetAccountingPeriod returns the AccountingPeriod field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetAccountingPeriod() int32 {
	if o == nil || o.AccountingPeriod == nil {
		var ret int32
		return ret
	}
	return *o.AccountingPeriod
}

// GetAccountingPeriodOk returns a tuple with the AccountingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetAccountingPeriodOk() (*int32, bool) {
	if o == nil || o.AccountingPeriod == nil {
		return nil, false
	}
	return o.AccountingPeriod, true
}

// HasAccountingPeriod returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasAccountingPeriod() bool {
	if o != nil && o.AccountingPeriod != nil {
		return true
	}

	return false
}

// SetAccountingPeriod gets a reference to the given int32 and assigns it to the AccountingPeriod field.
func (o *CompanyParamsFiscalYears) SetAccountingPeriod(v int32) {
	o.AccountingPeriod = &v
}

// GetDepreciationFraction returns the DepreciationFraction field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetDepreciationFraction() int32 {
	if o == nil || o.DepreciationFraction == nil {
		var ret int32
		return ret
	}
	return *o.DepreciationFraction
}

// GetDepreciationFractionOk returns a tuple with the DepreciationFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetDepreciationFractionOk() (*int32, bool) {
	if o == nil || o.DepreciationFraction == nil {
		return nil, false
	}
	return o.DepreciationFraction, true
}

// HasDepreciationFraction returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasDepreciationFraction() bool {
	if o != nil && o.DepreciationFraction != nil {
		return true
	}

	return false
}

// SetDepreciationFraction gets a reference to the given int32 and assigns it to the DepreciationFraction field.
func (o *CompanyParamsFiscalYears) SetDepreciationFraction(v int32) {
	o.DepreciationFraction = &v
}

// GetTaxFraction returns the TaxFraction field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetTaxFraction() int32 {
	if o == nil || o.TaxFraction == nil {
		var ret int32
		return ret
	}
	return *o.TaxFraction
}

// GetTaxFractionOk returns a tuple with the TaxFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetTaxFractionOk() (*int32, bool) {
	if o == nil || o.TaxFraction == nil {
		return nil, false
	}
	return o.TaxFraction, true
}

// HasTaxFraction returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasTaxFraction() bool {
	if o != nil && o.TaxFraction != nil {
		return true
	}

	return false
}

// SetTaxFraction gets a reference to the given int32 and assigns it to the TaxFraction field.
func (o *CompanyParamsFiscalYears) SetTaxFraction(v int32) {
	o.TaxFraction = &v
}

// GetReturnCode returns the ReturnCode field value if set, zero value otherwise.
func (o *CompanyParamsFiscalYears) GetReturnCode() int32 {
	if o == nil || o.ReturnCode == nil {
		var ret int32
		return ret
	}
	return *o.ReturnCode
}

// GetReturnCodeOk returns a tuple with the ReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyParamsFiscalYears) GetReturnCodeOk() (*int32, bool) {
	if o == nil || o.ReturnCode == nil {
		return nil, false
	}
	return o.ReturnCode, true
}

// HasReturnCode returns a boolean if a field has been set.
func (o *CompanyParamsFiscalYears) HasReturnCode() bool {
	if o != nil && o.ReturnCode != nil {
		return true
	}

	return false
}

// SetReturnCode gets a reference to the given int32 and assigns it to the ReturnCode field.
func (o *CompanyParamsFiscalYears) SetReturnCode(v int32) {
	o.ReturnCode = &v
}

func (o CompanyParamsFiscalYears) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UseIndustryTemplate != nil {
		toSerialize["use_industry_template"] = o.UseIndustryTemplate
	}
	if o.IndirectWriteOffMethod != nil {
		toSerialize["indirect_write_off_method"] = o.IndirectWriteOffMethod
	}
	if o.IndirectWriteOffMethodType != nil {
		toSerialize["indirect_write_off_method_type"] = o.IndirectWriteOffMethodType
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.AccountingPeriod != nil {
		toSerialize["accounting_period"] = o.AccountingPeriod
	}
	if o.DepreciationFraction != nil {
		toSerialize["depreciation_fraction"] = o.DepreciationFraction
	}
	if o.TaxFraction != nil {
		toSerialize["tax_fraction"] = o.TaxFraction
	}
	if o.ReturnCode != nil {
		toSerialize["return_code"] = o.ReturnCode
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyParamsFiscalYears struct {
	value *CompanyParamsFiscalYears
	isSet bool
}

func (v NullableCompanyParamsFiscalYears) Get() *CompanyParamsFiscalYears {
	return v.value
}

func (v *NullableCompanyParamsFiscalYears) Set(val *CompanyParamsFiscalYears) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyParamsFiscalYears) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyParamsFiscalYears) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyParamsFiscalYears(val *CompanyParamsFiscalYears) *NullableCompanyParamsFiscalYears {
	return &NullableCompanyParamsFiscalYears{value: val, isSet: true}
}

func (v NullableCompanyParamsFiscalYears) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyParamsFiscalYears) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


