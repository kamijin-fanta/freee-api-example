/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freee

import (
	"encoding/json"
)

// AccountItemParamsAccountItem struct for AccountItemParamsAccountItem
type AccountItemParamsAccountItem struct {
	// 勘定科目名 (30文字以内)
	Name string `json:"name"`
	// ショートカット1 (20文字以内)
	Shortcut *string `json:"shortcut,omitempty"`
	// ショートカット2(勘定科目コード)(20文字以内)
	ShortcutNum *string `json:"shortcut_num,omitempty"`
	// 税区分コード
	TaxCode int32 `json:"tax_code"`
	// 決算書表示名（小カテゴリー） Selectablesフォーム用選択項目情報エンドポイント(account_groups.name)で取得可能です
	GroupName string `json:"group_name"`
	// 勘定科目カテゴリーID Selectablesフォーム用選択項目情報エンドポイント(account_groups.account_category_id)で取得可能です
	AccountCategoryId int32 `json:"account_category_id"`
	// 収入取引相手勘定科目ID
	CorrespondingIncomeId int32 `json:"corresponding_income_id"`
	// 支出取引相手勘定科目ID
	CorrespondingExpenseId int32 `json:"corresponding_expense_id"`
	// 減価償却累計額勘定科目ID（法人のみ利用可能）
	AccumulatedDepAccountItemId *int32 `json:"accumulated_dep_account_item_id,omitempty"`
	// 検索可能:2, 検索不可：3(登録時未指定の場合は2で登録されます。更新時未指定の場合はsearchableは変更されません。)
	Searchable *int32 `json:"searchable,omitempty"`
	// 品目
	Items *[]AccountItemParamsAccountItemItems `json:"items,omitempty"`
	// 取引先
	Partners *[]AccountItemParamsAccountItemItems `json:"partners,omitempty"`
}

// NewAccountItemParamsAccountItem instantiates a new AccountItemParamsAccountItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountItemParamsAccountItem(name string, taxCode int32, groupName string, accountCategoryId int32, correspondingIncomeId int32, correspondingExpenseId int32, ) *AccountItemParamsAccountItem {
	this := AccountItemParamsAccountItem{}
	this.Name = name
	this.TaxCode = taxCode
	this.GroupName = groupName
	this.AccountCategoryId = accountCategoryId
	this.CorrespondingIncomeId = correspondingIncomeId
	this.CorrespondingExpenseId = correspondingExpenseId
	return &this
}

// NewAccountItemParamsAccountItemWithDefaults instantiates a new AccountItemParamsAccountItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountItemParamsAccountItemWithDefaults() *AccountItemParamsAccountItem {
	this := AccountItemParamsAccountItem{}
	return &this
}

// GetName returns the Name field value
func (o *AccountItemParamsAccountItem) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountItemParamsAccountItem) SetName(v string) {
	o.Name = v
}

// GetShortcut returns the Shortcut field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetShortcut() string {
	if o == nil || o.Shortcut == nil {
		var ret string
		return ret
	}
	return *o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetShortcutOk() (*string, bool) {
	if o == nil || o.Shortcut == nil {
		return nil, false
	}
	return o.Shortcut, true
}

// HasShortcut returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasShortcut() bool {
	if o != nil && o.Shortcut != nil {
		return true
	}

	return false
}

// SetShortcut gets a reference to the given string and assigns it to the Shortcut field.
func (o *AccountItemParamsAccountItem) SetShortcut(v string) {
	o.Shortcut = &v
}

// GetShortcutNum returns the ShortcutNum field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetShortcutNum() string {
	if o == nil || o.ShortcutNum == nil {
		var ret string
		return ret
	}
	return *o.ShortcutNum
}

// GetShortcutNumOk returns a tuple with the ShortcutNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetShortcutNumOk() (*string, bool) {
	if o == nil || o.ShortcutNum == nil {
		return nil, false
	}
	return o.ShortcutNum, true
}

// HasShortcutNum returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasShortcutNum() bool {
	if o != nil && o.ShortcutNum != nil {
		return true
	}

	return false
}

// SetShortcutNum gets a reference to the given string and assigns it to the ShortcutNum field.
func (o *AccountItemParamsAccountItem) SetShortcutNum(v string) {
	o.ShortcutNum = &v
}

// GetTaxCode returns the TaxCode field value
func (o *AccountItemParamsAccountItem) GetTaxCode() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetTaxCodeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaxCode, true
}

// SetTaxCode sets field value
func (o *AccountItemParamsAccountItem) SetTaxCode(v int32) {
	o.TaxCode = v
}

// GetGroupName returns the GroupName field value
func (o *AccountItemParamsAccountItem) GetGroupName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *AccountItemParamsAccountItem) SetGroupName(v string) {
	o.GroupName = v
}

// GetAccountCategoryId returns the AccountCategoryId field value
func (o *AccountItemParamsAccountItem) GetAccountCategoryId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AccountCategoryId
}

// GetAccountCategoryIdOk returns a tuple with the AccountCategoryId field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetAccountCategoryIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountCategoryId, true
}

// SetAccountCategoryId sets field value
func (o *AccountItemParamsAccountItem) SetAccountCategoryId(v int32) {
	o.AccountCategoryId = v
}

// GetCorrespondingIncomeId returns the CorrespondingIncomeId field value
func (o *AccountItemParamsAccountItem) GetCorrespondingIncomeId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.CorrespondingIncomeId
}

// GetCorrespondingIncomeIdOk returns a tuple with the CorrespondingIncomeId field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetCorrespondingIncomeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CorrespondingIncomeId, true
}

// SetCorrespondingIncomeId sets field value
func (o *AccountItemParamsAccountItem) SetCorrespondingIncomeId(v int32) {
	o.CorrespondingIncomeId = v
}

// GetCorrespondingExpenseId returns the CorrespondingExpenseId field value
func (o *AccountItemParamsAccountItem) GetCorrespondingExpenseId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.CorrespondingExpenseId
}

// GetCorrespondingExpenseIdOk returns a tuple with the CorrespondingExpenseId field value
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetCorrespondingExpenseIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CorrespondingExpenseId, true
}

// SetCorrespondingExpenseId sets field value
func (o *AccountItemParamsAccountItem) SetCorrespondingExpenseId(v int32) {
	o.CorrespondingExpenseId = v
}

// GetAccumulatedDepAccountItemId returns the AccumulatedDepAccountItemId field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetAccumulatedDepAccountItemId() int32 {
	if o == nil || o.AccumulatedDepAccountItemId == nil {
		var ret int32
		return ret
	}
	return *o.AccumulatedDepAccountItemId
}

// GetAccumulatedDepAccountItemIdOk returns a tuple with the AccumulatedDepAccountItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetAccumulatedDepAccountItemIdOk() (*int32, bool) {
	if o == nil || o.AccumulatedDepAccountItemId == nil {
		return nil, false
	}
	return o.AccumulatedDepAccountItemId, true
}

// HasAccumulatedDepAccountItemId returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasAccumulatedDepAccountItemId() bool {
	if o != nil && o.AccumulatedDepAccountItemId != nil {
		return true
	}

	return false
}

// SetAccumulatedDepAccountItemId gets a reference to the given int32 and assigns it to the AccumulatedDepAccountItemId field.
func (o *AccountItemParamsAccountItem) SetAccumulatedDepAccountItemId(v int32) {
	o.AccumulatedDepAccountItemId = &v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetSearchable() int32 {
	if o == nil || o.Searchable == nil {
		var ret int32
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetSearchableOk() (*int32, bool) {
	if o == nil || o.Searchable == nil {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasSearchable() bool {
	if o != nil && o.Searchable != nil {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given int32 and assigns it to the Searchable field.
func (o *AccountItemParamsAccountItem) SetSearchable(v int32) {
	o.Searchable = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetItems() []AccountItemParamsAccountItemItems {
	if o == nil || o.Items == nil {
		var ret []AccountItemParamsAccountItemItems
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetItemsOk() (*[]AccountItemParamsAccountItemItems, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AccountItemParamsAccountItemItems and assigns it to the Items field.
func (o *AccountItemParamsAccountItem) SetItems(v []AccountItemParamsAccountItemItems) {
	o.Items = &v
}

// GetPartners returns the Partners field value if set, zero value otherwise.
func (o *AccountItemParamsAccountItem) GetPartners() []AccountItemParamsAccountItemItems {
	if o == nil || o.Partners == nil {
		var ret []AccountItemParamsAccountItemItems
		return ret
	}
	return *o.Partners
}

// GetPartnersOk returns a tuple with the Partners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemParamsAccountItem) GetPartnersOk() (*[]AccountItemParamsAccountItemItems, bool) {
	if o == nil || o.Partners == nil {
		return nil, false
	}
	return o.Partners, true
}

// HasPartners returns a boolean if a field has been set.
func (o *AccountItemParamsAccountItem) HasPartners() bool {
	if o != nil && o.Partners != nil {
		return true
	}

	return false
}

// SetPartners gets a reference to the given []AccountItemParamsAccountItemItems and assigns it to the Partners field.
func (o *AccountItemParamsAccountItem) SetPartners(v []AccountItemParamsAccountItemItems) {
	o.Partners = &v
}

func (o AccountItemParamsAccountItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Shortcut != nil {
		toSerialize["shortcut"] = o.Shortcut
	}
	if o.ShortcutNum != nil {
		toSerialize["shortcut_num"] = o.ShortcutNum
	}
	if true {
		toSerialize["tax_code"] = o.TaxCode
	}
	if true {
		toSerialize["group_name"] = o.GroupName
	}
	if true {
		toSerialize["account_category_id"] = o.AccountCategoryId
	}
	if true {
		toSerialize["corresponding_income_id"] = o.CorrespondingIncomeId
	}
	if true {
		toSerialize["corresponding_expense_id"] = o.CorrespondingExpenseId
	}
	if o.AccumulatedDepAccountItemId != nil {
		toSerialize["accumulated_dep_account_item_id"] = o.AccumulatedDepAccountItemId
	}
	if o.Searchable != nil {
		toSerialize["searchable"] = o.Searchable
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Partners != nil {
		toSerialize["partners"] = o.Partners
	}
	return json.Marshal(toSerialize)
}

type NullableAccountItemParamsAccountItem struct {
	value *AccountItemParamsAccountItem
	isSet bool
}

func (v NullableAccountItemParamsAccountItem) Get() *AccountItemParamsAccountItem {
	return v.value
}

func (v *NullableAccountItemParamsAccountItem) Set(val *AccountItemParamsAccountItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountItemParamsAccountItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountItemParamsAccountItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountItemParamsAccountItem(val *AccountItemParamsAccountItem) *NullableAccountItemParamsAccountItem {
	return &NullableAccountItemParamsAccountItem{value: val, isSet: true}
}

func (v NullableAccountItemParamsAccountItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountItemParamsAccountItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


