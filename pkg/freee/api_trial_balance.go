/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freee

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// TrialBalanceApiService TrialBalanceApi service
type TrialBalanceApiService service

type ApiGetTrialBsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	adjustment *string
}

func (r ApiGetTrialBsRequest) CompanyId(companyId int32) ApiGetTrialBsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialBsRequest) FiscalYear(fiscalYear int32) ApiGetTrialBsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialBsRequest) StartMonth(startMonth int32) ApiGetTrialBsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialBsRequest) EndMonth(endMonth int32) ApiGetTrialBsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialBsRequest) StartDate(startDate string) ApiGetTrialBsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialBsRequest) EndDate(endDate string) ApiGetTrialBsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialBsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialBsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialBsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialBsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialBsRequest) PartnerId(partnerId int32) ApiGetTrialBsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialBsRequest) PartnerCode(partnerCode string) ApiGetTrialBsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialBsRequest) ItemId(itemId int32) ApiGetTrialBsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialBsRequest) Adjustment(adjustment string) ApiGetTrialBsRequest {
	r.adjustment = &adjustment
	return r
}

func (r ApiGetTrialBsRequest) Execute() (TrialBsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialBsExecute(r)
}

/*
 * GetTrialBs 貸借対照表の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の貸借対照表を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>opening_balance : 期首残高 </p>
</li>

<li>
<p>debit_amount : 借方金額 </p>
</li>
<li>
<p>credit_amount:  貸方金額 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<li>
<p>composition_ratio : 構成比</p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>  </ul>
<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_bs?company_id=1&amp;fiscal_year=2017&amp;breakdown_display_type=partner</p>
</blockquote>

<pre><code>{
  &quot;trial_bs&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;breakdown_display_type&quot; : &quot;partner&quot;,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1000,
        &quot;account_item_name&quot; : &quot;現金&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;流動資産&quot;,
        &quot;opening_balance&quot; : 100000,
        &quot;debit_amount&quot; : 50000,
        &quot;credit_amount&quot; : 20000,
        &quot;closing_balance&quot; : 130000,
        &quot;composition_ratio&quot; : 0.25
        &quot;partners&quot; : [{
          &quot;id&quot; : 123,
          &quot;name&quot; : &quot;freee&quot;,
          &quot;opening_balance&quot; : 100000,
          &quot;debit_amount&quot; : 50000,
          &quot;credit_amount&quot; : 20000,
          &quot;closing_balance&quot; : 130000,
          &quot;composition_ratio&quot; : 0.25
          },
        ...
        ]
      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialBsRequest
 */
func (a *TrialBalanceApiService) GetTrialBs(ctx _context.Context) ApiGetTrialBsRequest {
	return ApiGetTrialBsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialBsResponse
 */
func (a *TrialBalanceApiService) GetTrialBsExecute(r ApiGetTrialBsRequest) (TrialBsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialBs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_bs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialBsThreeYearsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	adjustment *string
}

func (r ApiGetTrialBsThreeYearsRequest) CompanyId(companyId int32) ApiGetTrialBsThreeYearsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) FiscalYear(fiscalYear int32) ApiGetTrialBsThreeYearsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) StartMonth(startMonth int32) ApiGetTrialBsThreeYearsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) EndMonth(endMonth int32) ApiGetTrialBsThreeYearsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) StartDate(startDate string) ApiGetTrialBsThreeYearsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) EndDate(endDate string) ApiGetTrialBsThreeYearsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialBsThreeYearsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialBsThreeYearsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) PartnerId(partnerId int32) ApiGetTrialBsThreeYearsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) PartnerCode(partnerCode string) ApiGetTrialBsThreeYearsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) ItemId(itemId int32) ApiGetTrialBsThreeYearsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialBsThreeYearsRequest) Adjustment(adjustment string) ApiGetTrialBsThreeYearsRequest {
	r.adjustment = &adjustment
	return r
}

func (r ApiGetTrialBsThreeYearsRequest) Execute() (TrialBsThreeYearsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialBsThreeYearsExecute(r)
}

/*
 * GetTrialBsThreeYears 貸借対照表(３期間比較)の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の貸借対照表(３期間比較)を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>two_years_before_closing_balance:  前々年度期末残高 </p>
</li>
<li>
<p>last_year_closing_balance:  前年度期末残高 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<li>
<p>year_on_year : 前年比</p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>  </ul>
<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_bs_three_years?company_id=1&amp;fiscal_year=2017</p>
</blockquote>

<pre><code>{
  &quot;trial_bs_three_years&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1000,
        &quot;account_item_name&quot; : &quot;現金&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;流動資産&quot;,
        &quot;two_year_before_closing_balance&quot; : 50000,
        &quot;last_year_closing_balance&quot; : 25000,
        &quot;closing_balance&quot; : 100000,
        &quot;year_on_year&quot; : 0.85
      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialBsThreeYearsRequest
 */
func (a *TrialBalanceApiService) GetTrialBsThreeYears(ctx _context.Context) ApiGetTrialBsThreeYearsRequest {
	return ApiGetTrialBsThreeYearsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialBsThreeYearsResponse
 */
func (a *TrialBalanceApiService) GetTrialBsThreeYearsExecute(r ApiGetTrialBsThreeYearsRequest) (TrialBsThreeYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsThreeYearsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialBsThreeYears")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_bs_three_years"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialBsTwoYearsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	adjustment *string
}

func (r ApiGetTrialBsTwoYearsRequest) CompanyId(companyId int32) ApiGetTrialBsTwoYearsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) FiscalYear(fiscalYear int32) ApiGetTrialBsTwoYearsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) StartMonth(startMonth int32) ApiGetTrialBsTwoYearsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) EndMonth(endMonth int32) ApiGetTrialBsTwoYearsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) StartDate(startDate string) ApiGetTrialBsTwoYearsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) EndDate(endDate string) ApiGetTrialBsTwoYearsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialBsTwoYearsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialBsTwoYearsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) PartnerId(partnerId int32) ApiGetTrialBsTwoYearsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) PartnerCode(partnerCode string) ApiGetTrialBsTwoYearsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) ItemId(itemId int32) ApiGetTrialBsTwoYearsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialBsTwoYearsRequest) Adjustment(adjustment string) ApiGetTrialBsTwoYearsRequest {
	r.adjustment = &adjustment
	return r
}

func (r ApiGetTrialBsTwoYearsRequest) Execute() (TrialBsTwoYearsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialBsTwoYearsExecute(r)
}

/*
 * GetTrialBsTwoYears 貸借対照表(前年比較)の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の貸借対照表(前年比較)を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>last_year_closing_balance:  前年度期末残高 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>  </ul>

<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_bs_two_years?company_id=1&amp;fiscal_year=2017</p>
</blockquote>

<pre><code>{
  &quot;trial_bs_two_years&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1000,
        &quot;account_item_name&quot; : &quot;現金&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;流動資産&quot;,
        &quot;last_year_closing_balance&quot; : 25000,
        &quot;closing_balance&quot; : 100000,
        &quot;year_on_year&quot; : 0.85

      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialBsTwoYearsRequest
 */
func (a *TrialBalanceApiService) GetTrialBsTwoYears(ctx _context.Context) ApiGetTrialBsTwoYearsRequest {
	return ApiGetTrialBsTwoYearsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialBsTwoYearsResponse
 */
func (a *TrialBalanceApiService) GetTrialBsTwoYearsExecute(r ApiGetTrialBsTwoYearsRequest) (TrialBsTwoYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialBsTwoYearsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialBsTwoYears")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_bs_two_years"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialPlRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	sectionId *int32
	adjustment *string
	costAllocation *string
}

func (r ApiGetTrialPlRequest) CompanyId(companyId int32) ApiGetTrialPlRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialPlRequest) FiscalYear(fiscalYear int32) ApiGetTrialPlRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialPlRequest) StartMonth(startMonth int32) ApiGetTrialPlRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialPlRequest) EndMonth(endMonth int32) ApiGetTrialPlRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialPlRequest) StartDate(startDate string) ApiGetTrialPlRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialPlRequest) EndDate(endDate string) ApiGetTrialPlRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialPlRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialPlRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialPlRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialPlRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialPlRequest) PartnerId(partnerId int32) ApiGetTrialPlRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialPlRequest) PartnerCode(partnerCode string) ApiGetTrialPlRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialPlRequest) ItemId(itemId int32) ApiGetTrialPlRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialPlRequest) SectionId(sectionId int32) ApiGetTrialPlRequest {
	r.sectionId = &sectionId
	return r
}
func (r ApiGetTrialPlRequest) Adjustment(adjustment string) ApiGetTrialPlRequest {
	r.adjustment = &adjustment
	return r
}
func (r ApiGetTrialPlRequest) CostAllocation(costAllocation string) ApiGetTrialPlRequest {
	r.costAllocation = &costAllocation
	return r
}

func (r ApiGetTrialPlRequest) Execute() (TrialPlResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialPlExecute(r)
}

/*
 * GetTrialPl 損益計算書の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の損益計算書を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>opening_balance : 期首残高 </p>
</li>

<li>
<p>debit_amount : 借方金額 </p>
</li>
<li>
<p>credit_amount:  貸方金額 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<li>
<p>composition_ratio : 構成比</p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li> <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li> </ul>
<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_pl?company_id=1&amp;fiscal_year=2017&amp;breakdown_display_type=partner</p>
</blockquote>

<pre><code>{
  &quot;trial_pl&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;breakdown_display_type&quot; : &quot;partner&quot;,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1500,
        &quot;account_item_name&quot; : &quot;売上高&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;営業収益&quot;,
        &quot;opening_balance&quot; : 100000,
        &quot;debit_amount&quot; : 50000,
        &quot;credit_amount&quot; : 20000,
        &quot;closing_balance&quot; : 130000,
        &quot;composition_ratio&quot; : 0.25
        &quot;partners&quot; : [{
          &quot;id&quot; : 123,
          &quot;name&quot; : &quot;freee&quot;,
          &quot;opening_balance&quot; : 100000,
          &quot;debit_amount&quot; : 50000,
          &quot;credit_amount&quot; : 20000,
          &quot;closing_balance&quot; : 130000,
          &quot;composition_ratio&quot; : 0.25
          },
        ...
        ]
      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialPlRequest
 */
func (a *TrialBalanceApiService) GetTrialPl(ctx _context.Context) ApiGetTrialPlRequest {
	return ApiGetTrialPlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialPlResponse
 */
func (a *TrialBalanceApiService) GetTrialPlExecute(r ApiGetTrialPlRequest) (TrialPlResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialPl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_pl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.sectionId != nil {
		localVarQueryParams.Add("section_id", parameterToString(*r.sectionId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	if r.costAllocation != nil {
		localVarQueryParams.Add("cost_allocation", parameterToString(*r.costAllocation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialPlSectionsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	sectionIds *string
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	adjustment *string
	costAllocation *string
}

func (r ApiGetTrialPlSectionsRequest) CompanyId(companyId int32) ApiGetTrialPlSectionsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialPlSectionsRequest) SectionIds(sectionIds string) ApiGetTrialPlSectionsRequest {
	r.sectionIds = &sectionIds
	return r
}
func (r ApiGetTrialPlSectionsRequest) FiscalYear(fiscalYear int32) ApiGetTrialPlSectionsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialPlSectionsRequest) StartMonth(startMonth int32) ApiGetTrialPlSectionsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialPlSectionsRequest) EndMonth(endMonth int32) ApiGetTrialPlSectionsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialPlSectionsRequest) StartDate(startDate string) ApiGetTrialPlSectionsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialPlSectionsRequest) EndDate(endDate string) ApiGetTrialPlSectionsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialPlSectionsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialPlSectionsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialPlSectionsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialPlSectionsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialPlSectionsRequest) PartnerId(partnerId int32) ApiGetTrialPlSectionsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialPlSectionsRequest) PartnerCode(partnerCode string) ApiGetTrialPlSectionsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialPlSectionsRequest) ItemId(itemId int32) ApiGetTrialPlSectionsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialPlSectionsRequest) Adjustment(adjustment string) ApiGetTrialPlSectionsRequest {
	r.adjustment = &adjustment
	return r
}
func (r ApiGetTrialPlSectionsRequest) CostAllocation(costAllocation string) ApiGetTrialPlSectionsRequest {
	r.costAllocation = &costAllocation
	return r
}

func (r ApiGetTrialPlSectionsRequest) Execute() (TrialPlSectionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialPlSectionsExecute(r)
}

/*
 * GetTrialPlSections 損益計算書(部門比較)の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の損益計算書(部門比較)を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>個人向けのプレミアムプラン、法人向けのビジネスプラン以上で利用可能なAPIです。対象外のプランでは401エラーを返却します。</li> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li> <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li> </ul>
<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_pl_section?company_id=1&amp;section_ids=1,2,3&amp;fiscal_year=2017</p></p>
</blockquote>

<pre><code>{
  &quot;trial_pl_sections&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;section_ids&quot; : &quot;1,2,3&quot;,
      &quot;fiscal_year&quot; : 2017,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1500,
        &quot;account_item_name&quot; : &quot;売上高&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;営業収益&quot;,
        &quot;closing_balance&quot; : 1000000,
        &quot;sections&quot; : [{
          &quot;id&quot;: 1
          &quot;name&quot;: &quot;営業部&quot;,
          &quot;closing_balance&quot; : 100000
        },
        {
          &quot;id&quot;: 2
          &quot;name&quot;: &quot;広報部&quot;,
          &quot;closing_balance&quot; : 200000
        },
        {
          &quot;id&quot;: 3
          &quot;name&quot;: &quot;人事部&quot;,
          &quot;closing_balance&quot; : 300000
        },
        ...
        ]
      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialPlSectionsRequest
 */
func (a *TrialBalanceApiService) GetTrialPlSections(ctx _context.Context) ApiGetTrialPlSectionsRequest {
	return ApiGetTrialPlSectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialPlSectionsResponse
 */
func (a *TrialBalanceApiService) GetTrialPlSectionsExecute(r ApiGetTrialPlSectionsRequest) (TrialPlSectionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlSectionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialPlSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_pl_sections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}
	if r.sectionIds == nil {
		return localVarReturnValue, nil, reportError("sectionIds is required and must be specified")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	localVarQueryParams.Add("section_ids", parameterToString(*r.sectionIds, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	if r.costAllocation != nil {
		localVarQueryParams.Add("cost_allocation", parameterToString(*r.costAllocation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialPlThreeYearsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	sectionId *int32
	adjustment *string
	costAllocation *string
}

func (r ApiGetTrialPlThreeYearsRequest) CompanyId(companyId int32) ApiGetTrialPlThreeYearsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) FiscalYear(fiscalYear int32) ApiGetTrialPlThreeYearsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) StartMonth(startMonth int32) ApiGetTrialPlThreeYearsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) EndMonth(endMonth int32) ApiGetTrialPlThreeYearsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) StartDate(startDate string) ApiGetTrialPlThreeYearsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) EndDate(endDate string) ApiGetTrialPlThreeYearsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialPlThreeYearsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialPlThreeYearsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) PartnerId(partnerId int32) ApiGetTrialPlThreeYearsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) PartnerCode(partnerCode string) ApiGetTrialPlThreeYearsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) ItemId(itemId int32) ApiGetTrialPlThreeYearsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) SectionId(sectionId int32) ApiGetTrialPlThreeYearsRequest {
	r.sectionId = &sectionId
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) Adjustment(adjustment string) ApiGetTrialPlThreeYearsRequest {
	r.adjustment = &adjustment
	return r
}
func (r ApiGetTrialPlThreeYearsRequest) CostAllocation(costAllocation string) ApiGetTrialPlThreeYearsRequest {
	r.costAllocation = &costAllocation
	return r
}

func (r ApiGetTrialPlThreeYearsRequest) Execute() (TrialPlThreeYearsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialPlThreeYearsExecute(r)
}

/*
 * GetTrialPlThreeYears 損益計算書(３期間比較)の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の損益計算書(３期間比較)を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>two_years_before_closing_balance:  前々年度期末残高 </p>
</li>
<li>
<p>last_year_closing_balance:  前年度期末残高 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<li>
<p>year_on_year : 前年比</p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li> <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li> </ul>
<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_pl_three_years?company_id=1&fiscal_year=2017</p>
</blockquote>

<pre><code>{
  &quot;trial_pl_three_years&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1500,
        &quot;account_item_name&quot; : &quot;売上高&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;営業収益&quot;,
        &quot;two_year_before_closing_balance&quot; : 50000,
        &quot;last_year_closing_balance&quot; : 25000,
        &quot;closing_balance&quot; : 100000,
        &quot;year_on_year&quot; : 0.85
      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialPlThreeYearsRequest
 */
func (a *TrialBalanceApiService) GetTrialPlThreeYears(ctx _context.Context) ApiGetTrialPlThreeYearsRequest {
	return ApiGetTrialPlThreeYearsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialPlThreeYearsResponse
 */
func (a *TrialBalanceApiService) GetTrialPlThreeYearsExecute(r ApiGetTrialPlThreeYearsRequest) (TrialPlThreeYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlThreeYearsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialPlThreeYears")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_pl_three_years"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.sectionId != nil {
		localVarQueryParams.Add("section_id", parameterToString(*r.sectionId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	if r.costAllocation != nil {
		localVarQueryParams.Add("cost_allocation", parameterToString(*r.costAllocation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTrialPlTwoYearsRequest struct {
	ctx _context.Context
	ApiService *TrialBalanceApiService
	companyId *int32
	fiscalYear *int32
	startMonth *int32
	endMonth *int32
	startDate *string
	endDate *string
	accountItemDisplayType *string
	breakdownDisplayType *string
	partnerId *int32
	partnerCode *string
	itemId *int32
	sectionId *int32
	adjustment *string
	costAllocation *string
}

func (r ApiGetTrialPlTwoYearsRequest) CompanyId(companyId int32) ApiGetTrialPlTwoYearsRequest {
	r.companyId = &companyId
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) FiscalYear(fiscalYear int32) ApiGetTrialPlTwoYearsRequest {
	r.fiscalYear = &fiscalYear
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) StartMonth(startMonth int32) ApiGetTrialPlTwoYearsRequest {
	r.startMonth = &startMonth
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) EndMonth(endMonth int32) ApiGetTrialPlTwoYearsRequest {
	r.endMonth = &endMonth
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) StartDate(startDate string) ApiGetTrialPlTwoYearsRequest {
	r.startDate = &startDate
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) EndDate(endDate string) ApiGetTrialPlTwoYearsRequest {
	r.endDate = &endDate
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) AccountItemDisplayType(accountItemDisplayType string) ApiGetTrialPlTwoYearsRequest {
	r.accountItemDisplayType = &accountItemDisplayType
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) BreakdownDisplayType(breakdownDisplayType string) ApiGetTrialPlTwoYearsRequest {
	r.breakdownDisplayType = &breakdownDisplayType
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) PartnerId(partnerId int32) ApiGetTrialPlTwoYearsRequest {
	r.partnerId = &partnerId
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) PartnerCode(partnerCode string) ApiGetTrialPlTwoYearsRequest {
	r.partnerCode = &partnerCode
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) ItemId(itemId int32) ApiGetTrialPlTwoYearsRequest {
	r.itemId = &itemId
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) SectionId(sectionId int32) ApiGetTrialPlTwoYearsRequest {
	r.sectionId = &sectionId
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) Adjustment(adjustment string) ApiGetTrialPlTwoYearsRequest {
	r.adjustment = &adjustment
	return r
}
func (r ApiGetTrialPlTwoYearsRequest) CostAllocation(costAllocation string) ApiGetTrialPlTwoYearsRequest {
	r.costAllocation = &costAllocation
	return r
}

func (r ApiGetTrialPlTwoYearsRequest) Execute() (TrialPlTwoYearsResponse, *_nethttp.Response, error) {
	return r.ApiService.GetTrialPlTwoYearsExecute(r)
}

/*
 * GetTrialPlTwoYears 損益計算書(前年比較)の取得
 * 
<h2 id="">概要</h2>

<p>指定した事業所の損益計算書(前年比較)を取得する</p>

<h2 id="_2">定義</h2>

<ul>

<li>
<p>created_at : 作成日時</p>
</li>

<li>
<p>account_item_name : 勘定科目名</p>
</li>

<li>
<p>hierarchy_level: 階層レベル</p>
</li>

<li>
<p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
</li>
<li>
<p>last_year_closing_balance:  前年度期末残高 </p>
</li>
<li>
<p>closing_balance : 期末残高 </p>
</li>
<li>
<p>year_on_year : 前年比</p>
</li>
<h2 id="_3">注意点</h2>
<ul> <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li> <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li> <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li> <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li> </ul>

<h2 id="_4">レスポンスの例</h2>

<blockquote>
<p>GET https://api.freee.co.jp/api/1/reports/trial_pl_two_years?company_id=1&amp;fiscal_year=2017</p>
</blockquote>

<pre><code>{
  &quot;trial_pl_two_years&quot; :
    {
      &quot;company_id&quot; : 1,
      &quot;fiscal_year&quot; : 2017,
      &quot;created_at&quot; : &quot;2018-05-01 12:00:50&quot
      &quot;balances&quot; : [{
        &quot;account_item_id&quot; : 1500,
        &quot;account_item_name&quot; : &quot;売上高&quot;,
        &quot;hierarchy_level&quot; : 2,
        &quot;account_category_name&quot; : &quot;営業収益&quot;,
        &quot;last_year_closing_balance&quot; : 25000,
        &quot;closing_balance&quot; : 100000,
        &quot;year_on_year&quot; : 0.85

      },
      ...
      ]
    }
}</code></pre>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetTrialPlTwoYearsRequest
 */
func (a *TrialBalanceApiService) GetTrialPlTwoYears(ctx _context.Context) ApiGetTrialPlTwoYearsRequest {
	return ApiGetTrialPlTwoYearsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return TrialPlTwoYearsResponse
 */
func (a *TrialBalanceApiService) GetTrialPlTwoYearsExecute(r ApiGetTrialPlTwoYearsRequest) (TrialPlTwoYearsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TrialPlTwoYearsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrialBalanceApiService.GetTrialPlTwoYears")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/1/reports/trial_pl_two_years"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if *r.companyId < 1 {
		return localVarReturnValue, nil, reportError("companyId must be greater than 1")
	}
	if *r.companyId > 2147483647 {
		return localVarReturnValue, nil, reportError("companyId must be less than 2147483647")
	}

	localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	if r.fiscalYear != nil {
		localVarQueryParams.Add("fiscal_year", parameterToString(*r.fiscalYear, ""))
	}
	if r.startMonth != nil {
		localVarQueryParams.Add("start_month", parameterToString(*r.startMonth, ""))
	}
	if r.endMonth != nil {
		localVarQueryParams.Add("end_month", parameterToString(*r.endMonth, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.accountItemDisplayType != nil {
		localVarQueryParams.Add("account_item_display_type", parameterToString(*r.accountItemDisplayType, ""))
	}
	if r.breakdownDisplayType != nil {
		localVarQueryParams.Add("breakdown_display_type", parameterToString(*r.breakdownDisplayType, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partner_id", parameterToString(*r.partnerId, ""))
	}
	if r.partnerCode != nil {
		localVarQueryParams.Add("partner_code", parameterToString(*r.partnerCode, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("item_id", parameterToString(*r.itemId, ""))
	}
	if r.sectionId != nil {
		localVarQueryParams.Add("section_id", parameterToString(*r.sectionId, ""))
	}
	if r.adjustment != nil {
		localVarQueryParams.Add("adjustment", parameterToString(*r.adjustment, ""))
	}
	if r.costAllocation != nil {
		localVarQueryParams.Add("cost_allocation", parameterToString(*r.costAllocation, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v TooManyRequestsError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InternalServerError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
