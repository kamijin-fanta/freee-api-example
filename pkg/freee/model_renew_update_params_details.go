/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freee

import (
	"encoding/json"
)

// RenewUpdateParamsDetails struct for RenewUpdateParamsDetails
type RenewUpdateParamsDetails struct {
	// 勘定科目ID
	AccountItemId int32 `json:"account_item_id"`
	// 税区分コード
	TaxCode int32 `json:"tax_code"`
	// 取引金額（税込で指定してください）
	Amount int32 `json:"amount"`
	// 消費税額（指定しない場合は自動で計算されます）
	Vat *int32 `json:"vat,omitempty"`
	// 品目ID
	ItemId *int32 `json:"item_id,omitempty"`
	// 部門ID
	SectionId *int32 `json:"section_id,omitempty"`
	// メモタグID
	TagIds *[]int32 `json:"tag_ids,omitempty"`
	// セグメント１ID
	Segment1TagId *int32 `json:"segment_1_tag_id,omitempty"`
	// セグメント２ID
	Segment2TagId *int32 `json:"segment_2_tag_id,omitempty"`
	// セグメント３ID
	Segment3TagId *int32 `json:"segment_3_tag_id,omitempty"`
	// 備考
	Description *string `json:"description,omitempty"`
}

// NewRenewUpdateParamsDetails instantiates a new RenewUpdateParamsDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenewUpdateParamsDetails(accountItemId int32, taxCode int32, amount int32, ) *RenewUpdateParamsDetails {
	this := RenewUpdateParamsDetails{}
	this.AccountItemId = accountItemId
	this.TaxCode = taxCode
	this.Amount = amount
	return &this
}

// NewRenewUpdateParamsDetailsWithDefaults instantiates a new RenewUpdateParamsDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenewUpdateParamsDetailsWithDefaults() *RenewUpdateParamsDetails {
	this := RenewUpdateParamsDetails{}
	return &this
}

// GetAccountItemId returns the AccountItemId field value
func (o *RenewUpdateParamsDetails) GetAccountItemId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AccountItemId
}

// GetAccountItemIdOk returns a tuple with the AccountItemId field value
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetAccountItemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountItemId, true
}

// SetAccountItemId sets field value
func (o *RenewUpdateParamsDetails) SetAccountItemId(v int32) {
	o.AccountItemId = v
}

// GetTaxCode returns the TaxCode field value
func (o *RenewUpdateParamsDetails) GetTaxCode() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetTaxCodeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaxCode, true
}

// SetTaxCode sets field value
func (o *RenewUpdateParamsDetails) SetTaxCode(v int32) {
	o.TaxCode = v
}

// GetAmount returns the Amount field value
func (o *RenewUpdateParamsDetails) GetAmount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RenewUpdateParamsDetails) SetAmount(v int32) {
	o.Amount = v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetVat() int32 {
	if o == nil || o.Vat == nil {
		var ret int32
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetVatOk() (*int32, bool) {
	if o == nil || o.Vat == nil {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasVat() bool {
	if o != nil && o.Vat != nil {
		return true
	}

	return false
}

// SetVat gets a reference to the given int32 and assigns it to the Vat field.
func (o *RenewUpdateParamsDetails) SetVat(v int32) {
	o.Vat = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetItemId() int32 {
	if o == nil || o.ItemId == nil {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetItemIdOk() (*int32, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *RenewUpdateParamsDetails) SetItemId(v int32) {
	o.ItemId = &v
}

// GetSectionId returns the SectionId field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetSectionId() int32 {
	if o == nil || o.SectionId == nil {
		var ret int32
		return ret
	}
	return *o.SectionId
}

// GetSectionIdOk returns a tuple with the SectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetSectionIdOk() (*int32, bool) {
	if o == nil || o.SectionId == nil {
		return nil, false
	}
	return o.SectionId, true
}

// HasSectionId returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasSectionId() bool {
	if o != nil && o.SectionId != nil {
		return true
	}

	return false
}

// SetSectionId gets a reference to the given int32 and assigns it to the SectionId field.
func (o *RenewUpdateParamsDetails) SetSectionId(v int32) {
	o.SectionId = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetTagIds() []int32 {
	if o == nil || o.TagIds == nil {
		var ret []int32
		return ret
	}
	return *o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetTagIdsOk() (*[]int32, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []int32 and assigns it to the TagIds field.
func (o *RenewUpdateParamsDetails) SetTagIds(v []int32) {
	o.TagIds = &v
}

// GetSegment1TagId returns the Segment1TagId field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetSegment1TagId() int32 {
	if o == nil || o.Segment1TagId == nil {
		var ret int32
		return ret
	}
	return *o.Segment1TagId
}

// GetSegment1TagIdOk returns a tuple with the Segment1TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetSegment1TagIdOk() (*int32, bool) {
	if o == nil || o.Segment1TagId == nil {
		return nil, false
	}
	return o.Segment1TagId, true
}

// HasSegment1TagId returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasSegment1TagId() bool {
	if o != nil && o.Segment1TagId != nil {
		return true
	}

	return false
}

// SetSegment1TagId gets a reference to the given int32 and assigns it to the Segment1TagId field.
func (o *RenewUpdateParamsDetails) SetSegment1TagId(v int32) {
	o.Segment1TagId = &v
}

// GetSegment2TagId returns the Segment2TagId field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetSegment2TagId() int32 {
	if o == nil || o.Segment2TagId == nil {
		var ret int32
		return ret
	}
	return *o.Segment2TagId
}

// GetSegment2TagIdOk returns a tuple with the Segment2TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetSegment2TagIdOk() (*int32, bool) {
	if o == nil || o.Segment2TagId == nil {
		return nil, false
	}
	return o.Segment2TagId, true
}

// HasSegment2TagId returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasSegment2TagId() bool {
	if o != nil && o.Segment2TagId != nil {
		return true
	}

	return false
}

// SetSegment2TagId gets a reference to the given int32 and assigns it to the Segment2TagId field.
func (o *RenewUpdateParamsDetails) SetSegment2TagId(v int32) {
	o.Segment2TagId = &v
}

// GetSegment3TagId returns the Segment3TagId field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetSegment3TagId() int32 {
	if o == nil || o.Segment3TagId == nil {
		var ret int32
		return ret
	}
	return *o.Segment3TagId
}

// GetSegment3TagIdOk returns a tuple with the Segment3TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetSegment3TagIdOk() (*int32, bool) {
	if o == nil || o.Segment3TagId == nil {
		return nil, false
	}
	return o.Segment3TagId, true
}

// HasSegment3TagId returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasSegment3TagId() bool {
	if o != nil && o.Segment3TagId != nil {
		return true
	}

	return false
}

// SetSegment3TagId gets a reference to the given int32 and assigns it to the Segment3TagId field.
func (o *RenewUpdateParamsDetails) SetSegment3TagId(v int32) {
	o.Segment3TagId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RenewUpdateParamsDetails) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewUpdateParamsDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RenewUpdateParamsDetails) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RenewUpdateParamsDetails) SetDescription(v string) {
	o.Description = &v
}

func (o RenewUpdateParamsDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_item_id"] = o.AccountItemId
	}
	if true {
		toSerialize["tax_code"] = o.TaxCode
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.Vat != nil {
		toSerialize["vat"] = o.Vat
	}
	if o.ItemId != nil {
		toSerialize["item_id"] = o.ItemId
	}
	if o.SectionId != nil {
		toSerialize["section_id"] = o.SectionId
	}
	if o.TagIds != nil {
		toSerialize["tag_ids"] = o.TagIds
	}
	if o.Segment1TagId != nil {
		toSerialize["segment_1_tag_id"] = o.Segment1TagId
	}
	if o.Segment2TagId != nil {
		toSerialize["segment_2_tag_id"] = o.Segment2TagId
	}
	if o.Segment3TagId != nil {
		toSerialize["segment_3_tag_id"] = o.Segment3TagId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableRenewUpdateParamsDetails struct {
	value *RenewUpdateParamsDetails
	isSet bool
}

func (v NullableRenewUpdateParamsDetails) Get() *RenewUpdateParamsDetails {
	return v.value
}

func (v *NullableRenewUpdateParamsDetails) Set(val *RenewUpdateParamsDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRenewUpdateParamsDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRenewUpdateParamsDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenewUpdateParamsDetails(val *RenewUpdateParamsDetails) *NullableRenewUpdateParamsDetails {
	return &NullableRenewUpdateParamsDetails{value: val, isSet: true}
}

func (v NullableRenewUpdateParamsDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenewUpdateParamsDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


