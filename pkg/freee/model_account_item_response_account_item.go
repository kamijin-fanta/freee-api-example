/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsと/receipts/{id}/downloadエンドポイント</h4>  <p>freeeはエンドポイント毎に一定頻度以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <ul>   <li>/reports:1秒に10回まで</li>   <li>/receipts/{id}/download:1秒に3回まで</li> </ul>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * API version: v1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package freee

import (
	"encoding/json"
)

// AccountItemResponseAccountItem struct for AccountItemResponseAccountItem
type AccountItemResponseAccountItem struct {
	// 勘定科目ID
	Id int32 `json:"id"`
	// 勘定科目名 (30文字以内)
	Name string `json:"name"`
	// 事業所ID
	CompanyId int32 `json:"company_id"`
	// 税区分コード
	TaxCode int32 `json:"tax_code"`
	// 勘定科目カテゴリー
	AccountCategory string `json:"account_category"`
	// 勘定科目のカテゴリーID
	AccountCategoryId int32 `json:"account_category_id"`
	// ショートカット1 (20文字以内)
	Shortcut *string `json:"shortcut,omitempty"`
	// ショートカット2(勘定科目コード) (20文字以内)
	ShortcutNum *string `json:"shortcut_num,omitempty"`
	// 検索可能:2, 検索不可：3
	Searchable int32 `json:"searchable"`
	// 減価償却累計額勘定科目（法人のみ利用可能）
	AccumulatedDepAccountItemName *string `json:"accumulated_dep_account_item_name,omitempty"`
	// 減価償却累計額勘定科目ID（法人のみ利用可能）
	AccumulatedDepAccountItemId NullableInt32 `json:"accumulated_dep_account_item_id,omitempty"`
	Items *[]AccountItemResponseAccountItemItems `json:"items,omitempty"`
	Partners *[]AccountItemResponseAccountItemPartners `json:"partners,omitempty"`
	// 勘定科目の使用設定（true: 使用する、false: 使用しない）
	Available bool `json:"available"`
	// 口座ID
	WalletableId NullableInt32 `json:"walletable_id"`
	// 決算書表示名（小カテゴリー）
	GroupName NullableString `json:"group_name,omitempty"`
	// 収入取引相手勘定科目名
	CorrespondingIncomeName NullableString `json:"corresponding_income_name,omitempty"`
	// 収入取引相手勘定科目ID
	CorrespondingIncomeId NullableInt32 `json:"corresponding_income_id,omitempty"`
	// 支出取引相手勘定科目名
	CorrespondingExpenseName NullableString `json:"corresponding_expense_name,omitempty"`
	// 支出取引相手勘定科目ID
	CorrespondingExpenseId NullableInt32 `json:"corresponding_expense_id,omitempty"`
}

// NewAccountItemResponseAccountItem instantiates a new AccountItemResponseAccountItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountItemResponseAccountItem(id int32, name string, companyId int32, taxCode int32, accountCategory string, accountCategoryId int32, searchable int32, available bool, walletableId NullableInt32, ) *AccountItemResponseAccountItem {
	this := AccountItemResponseAccountItem{}
	this.Id = id
	this.Name = name
	this.CompanyId = companyId
	this.TaxCode = taxCode
	this.AccountCategory = accountCategory
	this.AccountCategoryId = accountCategoryId
	this.Searchable = searchable
	this.Available = available
	this.WalletableId = walletableId
	return &this
}

// NewAccountItemResponseAccountItemWithDefaults instantiates a new AccountItemResponseAccountItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountItemResponseAccountItemWithDefaults() *AccountItemResponseAccountItem {
	this := AccountItemResponseAccountItem{}
	return &this
}

// GetId returns the Id field value
func (o *AccountItemResponseAccountItem) GetId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountItemResponseAccountItem) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AccountItemResponseAccountItem) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountItemResponseAccountItem) SetName(v string) {
	o.Name = v
}

// GetCompanyId returns the CompanyId field value
func (o *AccountItemResponseAccountItem) GetCompanyId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetCompanyIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *AccountItemResponseAccountItem) SetCompanyId(v int32) {
	o.CompanyId = v
}

// GetTaxCode returns the TaxCode field value
func (o *AccountItemResponseAccountItem) GetTaxCode() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetTaxCodeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaxCode, true
}

// SetTaxCode sets field value
func (o *AccountItemResponseAccountItem) SetTaxCode(v int32) {
	o.TaxCode = v
}

// GetAccountCategory returns the AccountCategory field value
func (o *AccountItemResponseAccountItem) GetAccountCategory() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AccountCategory
}

// GetAccountCategoryOk returns a tuple with the AccountCategory field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetAccountCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountCategory, true
}

// SetAccountCategory sets field value
func (o *AccountItemResponseAccountItem) SetAccountCategory(v string) {
	o.AccountCategory = v
}

// GetAccountCategoryId returns the AccountCategoryId field value
func (o *AccountItemResponseAccountItem) GetAccountCategoryId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AccountCategoryId
}

// GetAccountCategoryIdOk returns a tuple with the AccountCategoryId field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetAccountCategoryIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountCategoryId, true
}

// SetAccountCategoryId sets field value
func (o *AccountItemResponseAccountItem) SetAccountCategoryId(v int32) {
	o.AccountCategoryId = v
}

// GetShortcut returns the Shortcut field value if set, zero value otherwise.
func (o *AccountItemResponseAccountItem) GetShortcut() string {
	if o == nil || o.Shortcut == nil {
		var ret string
		return ret
	}
	return *o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetShortcutOk() (*string, bool) {
	if o == nil || o.Shortcut == nil {
		return nil, false
	}
	return o.Shortcut, true
}

// HasShortcut returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasShortcut() bool {
	if o != nil && o.Shortcut != nil {
		return true
	}

	return false
}

// SetShortcut gets a reference to the given string and assigns it to the Shortcut field.
func (o *AccountItemResponseAccountItem) SetShortcut(v string) {
	o.Shortcut = &v
}

// GetShortcutNum returns the ShortcutNum field value if set, zero value otherwise.
func (o *AccountItemResponseAccountItem) GetShortcutNum() string {
	if o == nil || o.ShortcutNum == nil {
		var ret string
		return ret
	}
	return *o.ShortcutNum
}

// GetShortcutNumOk returns a tuple with the ShortcutNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetShortcutNumOk() (*string, bool) {
	if o == nil || o.ShortcutNum == nil {
		return nil, false
	}
	return o.ShortcutNum, true
}

// HasShortcutNum returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasShortcutNum() bool {
	if o != nil && o.ShortcutNum != nil {
		return true
	}

	return false
}

// SetShortcutNum gets a reference to the given string and assigns it to the ShortcutNum field.
func (o *AccountItemResponseAccountItem) SetShortcutNum(v string) {
	o.ShortcutNum = &v
}

// GetSearchable returns the Searchable field value
func (o *AccountItemResponseAccountItem) GetSearchable() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetSearchableOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Searchable, true
}

// SetSearchable sets field value
func (o *AccountItemResponseAccountItem) SetSearchable(v int32) {
	o.Searchable = v
}

// GetAccumulatedDepAccountItemName returns the AccumulatedDepAccountItemName field value if set, zero value otherwise.
func (o *AccountItemResponseAccountItem) GetAccumulatedDepAccountItemName() string {
	if o == nil || o.AccumulatedDepAccountItemName == nil {
		var ret string
		return ret
	}
	return *o.AccumulatedDepAccountItemName
}

// GetAccumulatedDepAccountItemNameOk returns a tuple with the AccumulatedDepAccountItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetAccumulatedDepAccountItemNameOk() (*string, bool) {
	if o == nil || o.AccumulatedDepAccountItemName == nil {
		return nil, false
	}
	return o.AccumulatedDepAccountItemName, true
}

// HasAccumulatedDepAccountItemName returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasAccumulatedDepAccountItemName() bool {
	if o != nil && o.AccumulatedDepAccountItemName != nil {
		return true
	}

	return false
}

// SetAccumulatedDepAccountItemName gets a reference to the given string and assigns it to the AccumulatedDepAccountItemName field.
func (o *AccountItemResponseAccountItem) SetAccumulatedDepAccountItemName(v string) {
	o.AccumulatedDepAccountItemName = &v
}

// GetAccumulatedDepAccountItemId returns the AccumulatedDepAccountItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetAccumulatedDepAccountItemId() int32 {
	if o == nil || o.AccumulatedDepAccountItemId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AccumulatedDepAccountItemId.Get()
}

// GetAccumulatedDepAccountItemIdOk returns a tuple with the AccumulatedDepAccountItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetAccumulatedDepAccountItemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccumulatedDepAccountItemId.Get(), o.AccumulatedDepAccountItemId.IsSet()
}

// HasAccumulatedDepAccountItemId returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasAccumulatedDepAccountItemId() bool {
	if o != nil && o.AccumulatedDepAccountItemId.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedDepAccountItemId gets a reference to the given NullableInt32 and assigns it to the AccumulatedDepAccountItemId field.
func (o *AccountItemResponseAccountItem) SetAccumulatedDepAccountItemId(v int32) {
	o.AccumulatedDepAccountItemId.Set(&v)
}
// SetAccumulatedDepAccountItemIdNil sets the value for AccumulatedDepAccountItemId to be an explicit nil
func (o *AccountItemResponseAccountItem) SetAccumulatedDepAccountItemIdNil() {
	o.AccumulatedDepAccountItemId.Set(nil)
}

// UnsetAccumulatedDepAccountItemId ensures that no value is present for AccumulatedDepAccountItemId, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetAccumulatedDepAccountItemId() {
	o.AccumulatedDepAccountItemId.Unset()
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AccountItemResponseAccountItem) GetItems() []AccountItemResponseAccountItemItems {
	if o == nil || o.Items == nil {
		var ret []AccountItemResponseAccountItemItems
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetItemsOk() (*[]AccountItemResponseAccountItemItems, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AccountItemResponseAccountItemItems and assigns it to the Items field.
func (o *AccountItemResponseAccountItem) SetItems(v []AccountItemResponseAccountItemItems) {
	o.Items = &v
}

// GetPartners returns the Partners field value if set, zero value otherwise.
func (o *AccountItemResponseAccountItem) GetPartners() []AccountItemResponseAccountItemPartners {
	if o == nil || o.Partners == nil {
		var ret []AccountItemResponseAccountItemPartners
		return ret
	}
	return *o.Partners
}

// GetPartnersOk returns a tuple with the Partners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetPartnersOk() (*[]AccountItemResponseAccountItemPartners, bool) {
	if o == nil || o.Partners == nil {
		return nil, false
	}
	return o.Partners, true
}

// HasPartners returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasPartners() bool {
	if o != nil && o.Partners != nil {
		return true
	}

	return false
}

// SetPartners gets a reference to the given []AccountItemResponseAccountItemPartners and assigns it to the Partners field.
func (o *AccountItemResponseAccountItem) SetPartners(v []AccountItemResponseAccountItemPartners) {
	o.Partners = &v
}

// GetAvailable returns the Available field value
func (o *AccountItemResponseAccountItem) GetAvailable() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *AccountItemResponseAccountItem) GetAvailableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *AccountItemResponseAccountItem) SetAvailable(v bool) {
	o.Available = v
}

// GetWalletableId returns the WalletableId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AccountItemResponseAccountItem) GetWalletableId() int32 {
	if o == nil || o.WalletableId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.WalletableId.Get()
}

// GetWalletableIdOk returns a tuple with the WalletableId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetWalletableIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WalletableId.Get(), o.WalletableId.IsSet()
}

// SetWalletableId sets field value
func (o *AccountItemResponseAccountItem) SetWalletableId(v int32) {
	o.WalletableId.Set(&v)
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetGroupName() string {
	if o == nil || o.GroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *AccountItemResponseAccountItem) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *AccountItemResponseAccountItem) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetCorrespondingIncomeName returns the CorrespondingIncomeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetCorrespondingIncomeName() string {
	if o == nil || o.CorrespondingIncomeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CorrespondingIncomeName.Get()
}

// GetCorrespondingIncomeNameOk returns a tuple with the CorrespondingIncomeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetCorrespondingIncomeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CorrespondingIncomeName.Get(), o.CorrespondingIncomeName.IsSet()
}

// HasCorrespondingIncomeName returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasCorrespondingIncomeName() bool {
	if o != nil && o.CorrespondingIncomeName.IsSet() {
		return true
	}

	return false
}

// SetCorrespondingIncomeName gets a reference to the given NullableString and assigns it to the CorrespondingIncomeName field.
func (o *AccountItemResponseAccountItem) SetCorrespondingIncomeName(v string) {
	o.CorrespondingIncomeName.Set(&v)
}
// SetCorrespondingIncomeNameNil sets the value for CorrespondingIncomeName to be an explicit nil
func (o *AccountItemResponseAccountItem) SetCorrespondingIncomeNameNil() {
	o.CorrespondingIncomeName.Set(nil)
}

// UnsetCorrespondingIncomeName ensures that no value is present for CorrespondingIncomeName, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetCorrespondingIncomeName() {
	o.CorrespondingIncomeName.Unset()
}

// GetCorrespondingIncomeId returns the CorrespondingIncomeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetCorrespondingIncomeId() int32 {
	if o == nil || o.CorrespondingIncomeId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CorrespondingIncomeId.Get()
}

// GetCorrespondingIncomeIdOk returns a tuple with the CorrespondingIncomeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetCorrespondingIncomeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CorrespondingIncomeId.Get(), o.CorrespondingIncomeId.IsSet()
}

// HasCorrespondingIncomeId returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasCorrespondingIncomeId() bool {
	if o != nil && o.CorrespondingIncomeId.IsSet() {
		return true
	}

	return false
}

// SetCorrespondingIncomeId gets a reference to the given NullableInt32 and assigns it to the CorrespondingIncomeId field.
func (o *AccountItemResponseAccountItem) SetCorrespondingIncomeId(v int32) {
	o.CorrespondingIncomeId.Set(&v)
}
// SetCorrespondingIncomeIdNil sets the value for CorrespondingIncomeId to be an explicit nil
func (o *AccountItemResponseAccountItem) SetCorrespondingIncomeIdNil() {
	o.CorrespondingIncomeId.Set(nil)
}

// UnsetCorrespondingIncomeId ensures that no value is present for CorrespondingIncomeId, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetCorrespondingIncomeId() {
	o.CorrespondingIncomeId.Unset()
}

// GetCorrespondingExpenseName returns the CorrespondingExpenseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetCorrespondingExpenseName() string {
	if o == nil || o.CorrespondingExpenseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CorrespondingExpenseName.Get()
}

// GetCorrespondingExpenseNameOk returns a tuple with the CorrespondingExpenseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetCorrespondingExpenseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CorrespondingExpenseName.Get(), o.CorrespondingExpenseName.IsSet()
}

// HasCorrespondingExpenseName returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasCorrespondingExpenseName() bool {
	if o != nil && o.CorrespondingExpenseName.IsSet() {
		return true
	}

	return false
}

// SetCorrespondingExpenseName gets a reference to the given NullableString and assigns it to the CorrespondingExpenseName field.
func (o *AccountItemResponseAccountItem) SetCorrespondingExpenseName(v string) {
	o.CorrespondingExpenseName.Set(&v)
}
// SetCorrespondingExpenseNameNil sets the value for CorrespondingExpenseName to be an explicit nil
func (o *AccountItemResponseAccountItem) SetCorrespondingExpenseNameNil() {
	o.CorrespondingExpenseName.Set(nil)
}

// UnsetCorrespondingExpenseName ensures that no value is present for CorrespondingExpenseName, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetCorrespondingExpenseName() {
	o.CorrespondingExpenseName.Unset()
}

// GetCorrespondingExpenseId returns the CorrespondingExpenseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountItemResponseAccountItem) GetCorrespondingExpenseId() int32 {
	if o == nil || o.CorrespondingExpenseId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CorrespondingExpenseId.Get()
}

// GetCorrespondingExpenseIdOk returns a tuple with the CorrespondingExpenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountItemResponseAccountItem) GetCorrespondingExpenseIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CorrespondingExpenseId.Get(), o.CorrespondingExpenseId.IsSet()
}

// HasCorrespondingExpenseId returns a boolean if a field has been set.
func (o *AccountItemResponseAccountItem) HasCorrespondingExpenseId() bool {
	if o != nil && o.CorrespondingExpenseId.IsSet() {
		return true
	}

	return false
}

// SetCorrespondingExpenseId gets a reference to the given NullableInt32 and assigns it to the CorrespondingExpenseId field.
func (o *AccountItemResponseAccountItem) SetCorrespondingExpenseId(v int32) {
	o.CorrespondingExpenseId.Set(&v)
}
// SetCorrespondingExpenseIdNil sets the value for CorrespondingExpenseId to be an explicit nil
func (o *AccountItemResponseAccountItem) SetCorrespondingExpenseIdNil() {
	o.CorrespondingExpenseId.Set(nil)
}

// UnsetCorrespondingExpenseId ensures that no value is present for CorrespondingExpenseId, not even an explicit nil
func (o *AccountItemResponseAccountItem) UnsetCorrespondingExpenseId() {
	o.CorrespondingExpenseId.Unset()
}

func (o AccountItemResponseAccountItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["company_id"] = o.CompanyId
	}
	if true {
		toSerialize["tax_code"] = o.TaxCode
	}
	if true {
		toSerialize["account_category"] = o.AccountCategory
	}
	if true {
		toSerialize["account_category_id"] = o.AccountCategoryId
	}
	if o.Shortcut != nil {
		toSerialize["shortcut"] = o.Shortcut
	}
	if o.ShortcutNum != nil {
		toSerialize["shortcut_num"] = o.ShortcutNum
	}
	if true {
		toSerialize["searchable"] = o.Searchable
	}
	if o.AccumulatedDepAccountItemName != nil {
		toSerialize["accumulated_dep_account_item_name"] = o.AccumulatedDepAccountItemName
	}
	if o.AccumulatedDepAccountItemId.IsSet() {
		toSerialize["accumulated_dep_account_item_id"] = o.AccumulatedDepAccountItemId.Get()
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Partners != nil {
		toSerialize["partners"] = o.Partners
	}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["walletable_id"] = o.WalletableId.Get()
	}
	if o.GroupName.IsSet() {
		toSerialize["group_name"] = o.GroupName.Get()
	}
	if o.CorrespondingIncomeName.IsSet() {
		toSerialize["corresponding_income_name"] = o.CorrespondingIncomeName.Get()
	}
	if o.CorrespondingIncomeId.IsSet() {
		toSerialize["corresponding_income_id"] = o.CorrespondingIncomeId.Get()
	}
	if o.CorrespondingExpenseName.IsSet() {
		toSerialize["corresponding_expense_name"] = o.CorrespondingExpenseName.Get()
	}
	if o.CorrespondingExpenseId.IsSet() {
		toSerialize["corresponding_expense_id"] = o.CorrespondingExpenseId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAccountItemResponseAccountItem struct {
	value *AccountItemResponseAccountItem
	isSet bool
}

func (v NullableAccountItemResponseAccountItem) Get() *AccountItemResponseAccountItem {
	return v.value
}

func (v *NullableAccountItemResponseAccountItem) Set(val *AccountItemResponseAccountItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountItemResponseAccountItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountItemResponseAccountItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountItemResponseAccountItem(val *AccountItemResponseAccountItem) *NullableAccountItemResponseAccountItem {
	return &NullableAccountItemResponseAccountItem{value: val, isSet: true}
}

func (v NullableAccountItemResponseAccountItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountItemResponseAccountItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


